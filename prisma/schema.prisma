// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid()) @unique
  email      String    @unique
  password   String
  fullName   String
  role       Role      @default(USER)
  isActive   Boolean   @default(true)
  tickets    Ticket[]
  payments   Payment[]
  notifications Notification[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

}
model Event {
  id           String    @id @default(uuid()) @unique
  title        String
  description  String
  location     String
  startDate    DateTime
  endDate      DateTime
  category     String
  totalTickets Int
  soldTickets  Int       @default(0)
  tickets      Ticket[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
model Ticket {
  id           String    @id @default(uuid()) @unique
  ticketNumber String    @unique
  price        Decimal
  isUsed       Boolean   @default(false)
  purchaseDate DateTime  @default(now())
  userId       String
  eventId      String
  user         User      @relation(fields: [userId], references: [id])
  event        Event     @relation(fields: [eventId], references: [id])
}
model Payment {
  id            String    @id @default(uuid()) @unique
  transactionId String    @unique
  amount        Decimal
  status        String    @default("pending")
  paymentMethod String
  paymentDate   DateTime  @default(now())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
}
model Notification {
  id        String   @id @default(uuid()) @unique
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  ORGANIZER
}