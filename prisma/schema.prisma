// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 1. Cập nhật schema.prisma để thêm bảng RefreshToken
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model User {
  id       String  @id @unique @default(uuid())
  email    String  @unique
  password String
  fullName String
  role     Role    @default(USER)
  isActive Boolean @default(false)
  avatar   String?

  // Quan hệ với các bảng khác
  events        Event[]        @relation("OrganizerEvents") // Organizer có thể tạo nhiều sự kiện
  tickets       Ticket[]
  payments      Payment[]
  notifications Notification[]
  refreshTokens RefreshToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id            String   @id @unique @default(uuid())
  title         String
  description   String
  location      String
  startDate     DateTime
  endDate       DateTime
  saleStartTime DateTime // Thời gian mở bán vé
  category      String
  totalTickets  Int
  soldTickets   Int      @default(0)
  imageUrl      String?

  // Organizer quản lý sự kiện này
  organizerId String
  organizer   User   @relation(fields: [organizerId], references: [id], onDelete: Cascade, name: "OrganizerEvents")

  ticketTypes TicketType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketType {
  id      String   @id @unique @default(uuid())
  name    String // Loại vé (VIP, Standard, Economy)
  price   Float
  eventId String
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets Ticket[]
}

model Ticket {
  id           String     @id @unique @default(uuid())
  ticketNumber String     @unique
  isUsed       Boolean    @default(false)
  purchaseDate DateTime   @default(now())
  userId       String?
  ticketTypeId String
  user         User?      @relation(fields: [userId], references: [id])
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String   @id @unique @default(uuid())
  transactionId String   @unique
  amount        Decimal
  status        String   @default("pending")
  paymentMethod String
  paymentDate   DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @unique @default(uuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  ORGANIZER
}
